require 'autotest/growl'

=begin
require 'test/unit'
# http://blog.restphone.com/2007/7/22/filter-your-stack-trace-to-only-see-your-code
module Test
  module Unit
    module Util
      module BacktraceFilter
        def filter_backtrace_with_only_my_code(backtrace, prefix=nil)
  	  puts "*** Hello! ***"
          result = filter_backtrace_without_only_my_code backtrace, prefix
          result.reject! {|x| x =~ %r{^.*/usr/local/lib/.*\n?} }
	  result << '*** Waa! ***'
          result
        end
        #alias_method_chain :filter_backtrace, :only_my_code
	alias_method :filter_backtrace_without_only_my_code, :filter_backtrace
	alias_method :filter_backtrace                     , :filter_backtrace_with_only_my_code
      end
    end
  end
end


Autotest.add_hook :ZZZrun_command do |autotest|
  alias :original_putc :putc

  # Discard the unbuffered output
  def putc(obj)
  end
end

Autotest.add_hook :ZZZran_command do |autotest|
  alias :whatever :putc   # So Ruby does not warn about discarding putc
  alias :putc     :original_putc

  autotest.results.delete_if { |result| result =~ %r{^.*/usr/local/lib/.*\n?} }
  puts autotest.results.join
end
=end

# Require redgreen after my :ran_command hook so mine runs first.
require 'autotest/redgreen'

# Exclude directories we don't need to test.
# http://www.railsontherun.com/2008/1/30/misc-tips-and-tricks
Autotest.add_hook :initialize do |autotest|
  %w( .svn vendor ).each { |exception| autotest.add_exception exception }
end
