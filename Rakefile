# Based on Ryan Bates:
# http://github.com/ryanb/dotfiles/blob/master/Rakefile

require 'rake'
require 'erb'

desc "install the dot files into user's home directory"
task :install do
  @replace_all = false

  Dir['*'].each do |file|
    next if %w[Rakefile README.md LICENSE].include? file
    next if file =~ /_public|_private/
    next if generated? file
    process file
  end

  # Process files which are assembled from public and private portions.
  Dir['*_public*'].each do |public_file|
    private_file = public_file.sub(/_public/, '_private').sub /.erb$/, ''  # Assume no ERB.
    combo_file   = public_file.sub /_public/, ''

    File.delete combo_file if File.exist? combo_file
    comment combo_file, '# Do not modify.  This file is autogenerated.' 
    concatenate combo_file, public_file
    concatenate combo_file, private_file if File.exist? private_file
    process combo_file
  end
end

def process(file)
  puts "processing #{file}"
  if File.exist? dot(file)
    if File.identical? file, dot(file)
      puts "identical ~/.#{file.sub('.erb', '')}"
    elsif @replace_all
      replace_file(file)
    else
      print "overwrite ~/.#{file.sub('.erb', '')}? [ynaq] "
      case $stdin.gets.chomp
      when 'a'
        @replace_all = true
        replace_file(file)
      when 'y'
        replace_file(file)
      when 'q'
        exit
      else
        puts "skipping ~/.#{file.sub('.erb', '')}"
      end
    end
  else
    link_file(file)
  end
end

def replace_file(file)
  system %Q{rm "$HOME/.#{file.sub('.erb', '')}"}
  link_file(file)
end

def link_file(file)
  if file =~ /.erb$/
    puts "generating ~/.#{file.sub('.erb', '')}"
    File.open(dot(file), 'w') do |new_file|
      new_file.write ERB.new(File.read(file)).result(binding)
    end
  else
    puts "linking ~/.#{file}"
    system %Q{ln -s "$PWD/#{file}" "$HOME/.#{file}"}
  end
end

def generated?(file)
  ["#{file}_private", "#{file}_public", "#{file.sub /.erb$/, ''}_public.erb"].any? { |f| File.exist? f }
end

# Appends b to a.
def concatenate(a, b)
  puts "concatenating #{b} onto #{a}"
  File.open(a, 'a') do |file|
    file.write IO.read(b)
  end
end

def comment(file, message)
  File.open(file, 'w') { |f| f.write "#{message}\n\n" }
end

def dot(file)
  File.join ENV['HOME'], ".#{file.sub '.erb', ''}"
end
